Charles Manuel, Daniel Lee
EECS 388
Project 1
Part 5: Writeup

1. Using the password as a key, rather than simply encrypting a concatenation of the password and the publicly available string, would avoid the length extension vulnerability. This is due to the fact that keys in HMAC encryption are used twice in the nested form H(key || H(key || message)). As a result, an attacker would not be able to accurately derive information about the inner hash (such as padding), as the combination of the inner and outer hash would obscure such information.

2. Part 2 of Project 1 showed that two different programs with different behavior can produce an identical hash when using a collision-vulnerable algorithm such as MD5. A system that relies on digital signatures to verify the integrity of programs would be endangered by this collision technique. An attacker could copy the signature from a valid program to a malicious program. If the attacker can design the malicious program such that it produces the same MD5 hash as the valid program, the copied signature would appear to verify the malicious program. Thus the malicious program would pass through a digital signature - reliant system and wreak havoc on the system.

3. The Bleichenbacher's Attack relies on the premise that the length of the unpadded message m is much shorter than the length of the RSA key, so that the encrypted message c = m^e mod n does not "wrap around" the modulus n. This premise allows the attacker to calculate e-th root of c in efficient time. However, when e >= 2^16 + 1, it is extremely likely for any message of reasonable length that the encrypted message "wraps around" modulus n. This forces the attacker to solve the Discrete Log Problem for modular arithmetic, which is known to be computationally hard. Therefore, Bleichenbacher's attack would not work in efficient, i.e. polynomial, time.

4. 
(a) The time complexity of a padding oracle attack on an AES-CBC encryption scheme would be O(N). This is because the padding oracle attack entails checking for valid padding for all possible values of each byte (256 attempts max) in a AES-CBC 16-byte long block. Thus, at worst an attacker would have need to compute padding validity n * 4096 times, where n is the number of blocks. This is concerning because linear time, especially with a low multiple such as 4096, would be trivial for an attacker. Even for extremely long messages, such an attack would not take much computing power nor time.

(b) A system designed to prevent padding oracle attacks in which only generic error messages are sent to the user in the case of either incorrect key, padding etc. could still be vulnerable through a timing attack. The system will likely check to see if padding is correct first before verifying the hash. If this is the case, an attacker could monitor the time it takes the server to respond to each query. If, out of the 256 attempts on a single byte, one generic error message is received slightly later than the others, the associated attempt likely produced correct padding. Deducing this for each byte, an attacker would still be able to use the system as a padding oracle and successfully decode the encrypted message into plaintext.

(c) Auguste Kerckhoffs's second principle for a secure cypher is, "It should not require secrecy, and it should not be a problem if it falls into enemy hands." This principle is useful in modern cryptography. A secure cryptographic system also should not require secrecy; as long as the key remains a secret between the sender and receiver of a message, the rest of the system and its workings should be publicly accessible without endangering the security of messages. While a cryptographic system in which the padding scheme is secret may prove cumbersome for an attacker, it would be far from secure. An attacker might either deduce the padding scheme through experimentation, try various different variations on pre-existing padding scheme techniques, or directly access details of the padding technique via separate hacking techniques / social engineering. Thus attempting to keep the padding technique secret would only be a temporary roadblock for a dedicated attacker. An alternative method for securing a system from padding oracle attacks might be to make error messages generic, then ensure that the server returns errors at a set time after each query. Additionally, the server might alert an administrator if it starts receiving large numbers of invalid queries in a short period of time.